@model FoxNetSoft.Plugin.Misc.PopupManager.Models.Admin.PopupWindowModel
@using FoxNetSoft.Plugin.Misc.PopupManager.Models.Admin
@using Microsoft.AspNetCore.Routing

    <div class="cards-group">
        @if (Model.Id > 0)
        {
            if (Model.NumberOfAvailableManufacturers > 0)
            {
                <div class="card card-default">
                    <div class="card-body">
                        @await Html.PartialAsync("Table", new DataTablesModel
    {
    Name = "popupwindowmanufacturers-grid",
    UrlRead = new DataUrl("ManufacturerList", "PopupManagerAdmin", new RouteValueDictionary { [nameof(Model.PopupWindowSearchModel.PopupWindowId)] = Model.PopupWindowSearchModel.PopupWindowId }),
    UrlDelete = new DataUrl("ManufacturerDelete", "PopupManagerAdmin", null),
    Length = Model.PopupWindowSearchModel.PageSize,
    LengthMenu = Model.PopupWindowSearchModel.AvailablePageSizes,
    ColumnCollection = new List<ColumnProperty>
    {
    new ColumnProperty(nameof(PopupWindowManufacturerModel.Published))
    {
    Title = T("Admin.FoxNetSoft.PopupManager.Products.Fields.Published").Text,
                          Width = "70",
             ClassName = NopColumnClassDefaults.CenterAll,
             Render = new RenderBoolean()
    },
    new ColumnProperty(nameof(PopupWindowManufacturerModel.Manufacturer))
    {
    Title = T("Admin.Catalog.Manufacturers.Fields.Name").Text
    },
    new ColumnProperty(nameof(PopupWindowManufacturerModel.ManufacturerId))
    {
    Title = T("Admin.Common.View").Text,
    Width = "150",
    ClassName = NopColumnClassDefaults.Button,
    Render = new RenderButtonView(new DataUrl("~/Admin/Manufacturer/Edit/", nameof(PopupWindowManufacturerModel.ManufacturerId)))
    },
    new ColumnProperty(nameof(PopupWindowManufacturerModel.Id))
    {
    Title = T("Admin.Common.Delete").Text,
    Width = "100",
    Render = new RenderButtonRemove(T("Admin.Common.Delete").Text),
    ClassName = NopColumnClassDefaults.Button
    }
    }
    })
                    </div>
                </div>

                <div class="card card-default no-margin">
                    <div class="card-header">
                        @T("Admin.Common.AddNewRecord")
                    </div>
                    <div class="card-body">
                        <div class="form-group row">
                            <div class="col-md-3">
                                <nop-label asp-for="@Model.AddPopupWindowManufacturer.ManufacturerId" />
                            </div>
                            <div class="col-md-9">
                                <nop-select asp-for="@Model.AddPopupWindowManufacturer.ManufacturerId" asp-items="@Model.AvailableManufacturers" />
                                <span asp-validation-for="@Model.AddPopupWindowManufacturer.ManufacturerId"></span>
                            </div>
                        </div>
                        <div class="form-group row">
                            <div class="col-md-9 offset-md-3">
                                <button type="button" id="addPopupWindowManufacturer" class="btn btn-primary">@T("Admin.Common.AddNewRecord")</button>
                            </div>
                        </div>
                    </div>
                    <script>
                    $(document).ready(function () {
                        $('#addPopupWindowManufacturer').click(function () {
                            $('#addPopupWindowManufacturer').attr('disabled', true);
                            var postData = {
                                ManufacturerId: $("#@Html.IdFor(model => model.AddPopupWindowManufacturer.ManufacturerId)").val(),
                                PopupWindowId: @Model.Id
                            };
                            addAntiForgeryToken(postData);

                            $.ajax({
                                cache: false,
                                type: "POST",
                                url: "@Html.Raw(Url.Action("ManufacturerInsert", "PopupManagerAdmin"))",
                                data: postData,
                                success: function (data, textStatus, jqXHR) {
                                    if (data.Result) {
                                        //reload grid
                                        updateTable('#popupwindowmanufacturers-grid');

                                        //clear input value
                                        //$("#@Html.IdFor(model => model.AddPopupWindowManufacturer.ManufacturerId)").val('');
                                    } else {
                                        //display errors if returned
                                        display_nop_error(data);
                                    }
                                },
                                complete: function (jqXHR, textStatus) {
                                    $('#addPopupWindowManufacturer').attr('disabled', false);
                                }
                            });
                        });
                    });
                    </script>
                </div>
            }
            else
            {
                <div class="card card-default">
                    <div class="card-body">
                        @T("Admin.Catalog.Products.Fields.Manufacturers.NoManufacturersAvailable")
                    </div>
                </div>

            }
        }
        else
        {
            <div class="card card-default">
                <div class="card-body">
                    @T("Admin.FoxNetSoft.PopupManager.Manufacturers.SaveBeforeEdit")
                </div>
            </div>
        }
    </div>
