@using Nop.Web.Models.Catalog
@model CompareProductsModel
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(T("PageTitle.CompareProducts").Text);
    //page class
    Html.AppendPageCssClassParts("html-compare-products-page");

    var columnWidth = "";
    if (Model.Products.Count > 0)
    {
        columnWidth = Math.Round((decimal)(86M / Model.Products.Count), 0).ToString() + "%";
    }

    var uniqueGroupes = new List<ProductSpecificationAttributeGroupModel>();
    foreach (var group in Model.Products.SelectMany(p => p.ProductSpecificationModel.Groups))
    {
        if (!uniqueGroupes.Any(g => g.Id == group.Id))
            uniqueGroupes.Add(group);
    }
    string small_searchterms_compare = string.Empty;
    string small_searchterms_compare_1 = string.Empty;
    string small_searchterms_compare_2 = string.Empty;
}

<div class="container">
<div class="page compare-products-page">
    <div class="page-title">
        <h1>@T("Products.Compare.Title")</h1>
    </div>
    <div class="page-body">
        <div class="row">
            <div class="column">
                <div class="item-text">Add Item 1</div>
                <div class="search-box-compare header-center compare-search-box ">
                    @await Component.InvokeAsync("CompareSearchBox")

                </div>
            </div>
            <div class="column1">
                <div class="item-text">Add Item 2</div>
                <div class="search-box-compare-1 header-center compare-search-box ">
                    @await Component.InvokeAsync("CompareSearchBox1")
                </div>
            </div>
            <div class="column2">
                <div class="item-text">Add Item 3</div>
                <div class="search-box-compare-2 header-center compare-search-box ">
                    @await Component.InvokeAsync("CompareSearchBox2")
                </div>
            </div>
        </div>

        @if (Model.Products.Count > 0)
        {

            <a href="#" onclick="setLocation('@Url.RouteUrl("ClearCompareList")')" class="clear-list">@T("Products.Compare.Clear")</a>
            <div class="table-wrapper">
                <table class="compare-products-table">
                    <tbody>
                        <tr class="product-name">
                            <td>
                                <label class="specification-group">@T("Products.Compare.Name")</label>
                            </td>
                            @foreach (var product in Model.Products)
                            {
                                <td style="width: @columnWidth;">
                                    <a href="@Url.RouteUrl("Product", new { SeName = product.SeName })">@product.Name</a>
                                </td>
                            }
                        </tr>
                        <tr class="remove-product">
                            <td class="empty">&nbsp;</td>
                            @foreach (var product in Model.Products)
                            {

                                <td style="width: @columnWidth;">
                                    <button type="button" class="button-2 remove-button" onclick="setLocation('@Url.RouteUrl("RemoveProductFromCompareList", new { productId = product.Id })')">@T("Common.Remove")</button>
                                </td>
                            }
                        </tr>
                        <tr class="product-picture">
                            <td class="empty">&nbsp;</td>
                            @{int iCount = 0;

                            }
                            @foreach (var product in Model.Products)
                            {
                                <td style="width: @columnWidth;">
                                    <a class="picture" href="@Url.RouteUrl("Product", new { SeName = product.SeName })"><img alt="@product.DefaultPictureModel.AlternateText" src="@product.DefaultPictureModel.ImageUrl" title="@product.DefaultPictureModel.Title" /></a>
                                </td>

                                if (iCount == 0)
                                {

                                    small_searchterms_compare = product.Name;
                                }
                                else if (iCount == 1)
                                {
                                    small_searchterms_compare_1 = product.Name;
                                }
                                else
                                {
                                    small_searchterms_compare_2 = product.Name;
                                }
                                iCount++;
                            }
                        </tr>
                        <tr class="product-price">
                            <td>
                                <label>@T("Products.Compare.Price")</label>
                            </td>
                            @foreach (var product in Model.Products)
                            {
                                <td style="width: @columnWidth;">
                                    @product.ProductPrice.Price
                                </td>
                            }
                        </tr>
                    </tbody>
                </table>
                <table class="compare-products-table">
                    <tbody class="scroll">
                        @if (Model.IncludeShortDescriptionInCompareProducts)
                        {
                            <tr class="short-description">
                                <td>
                                    <label>@T("Products.Compare.ShortDescription")</label>
                                </td>
                                @foreach (var product in Model.Products)
                                {
                                    <td style="width: @columnWidth;">
                                        @Html.Raw(product.ShortDescription)
                                    </td>
                                }
                            </tr>
                        }
                        @foreach (var group in uniqueGroupes)
                        {
                            if (group.Attributes.Count > 0)
                            {
                                @if (group.Id > 0)
                                {
                                    <tr>
                                        <td>
                                            <label class="specification-group">@group.Name</label>
                                        </td>
                                    </tr>
                                }
                                var uniqueGroupAttributes = new List<ProductSpecificationAttributeModel>();
                                foreach (var attribute in Model.Products.SelectMany(p => p.ProductSpecificationModel.Groups.Where(g => g.Id == group.Id).SelectMany(g => g.Attributes)))
                                {
                                    if (!uniqueGroupAttributes.Any(sa => sa.Id == attribute.Id))
                                        uniqueGroupAttributes.Add(attribute);
                                }
                                @foreach (var specificationAttribute in uniqueGroupAttributes)
                                {
                                    <tr class="specification">
                                        <td>
                                            <label class="specification">@specificationAttribute.Name</label>
                                        </td>
                                        @foreach (var product in Model.Products)
                                        {
                                            var foundProductSpec = product.ProductSpecificationModel.Groups
                                                .Where(g => g.Id == group.Id)
                                                .SelectMany(g => g.Attributes)
                                                .FirstOrDefault(sa => sa.Id == specificationAttribute.Id);

                                            <td style="width: @columnWidth;">
                                                @if (foundProductSpec != null)
                                                {
                                                    for (int i = 0; i < foundProductSpec.Values.Count; i++)
                                                    {
                                                        var value = foundProductSpec.Values[i];

                                                        if (string.IsNullOrEmpty(value.ColorSquaresRgb))
                                                        {
                                                            @Html.Raw(value.ValueRaw)
                                                            if (i != foundProductSpec.Values.Count - 1)
                                                            {
                                                                <text>,&nbsp;</text>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <div class="attribute-squares color-squares">
                                                                <span class="attribute-square-container" title="@Html.Raw(value.ValueRaw)">
                                                                    <span class="attribute-square" style="background-color: @(value.ColorSquaresRgb);">&nbsp;</span>
                                                                </span>
                                                            </div>
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    <text>&nbsp;</text>
                                                }
                                            </td>
                                        }
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>

            <div class="compare-products-mobile">
                <div class="compare-section product-picture">
                    <ul>
                        @foreach (var product in Model.Products)
                        {
                            <li class="item">
                                <div class="details">
                                    <button type="button" title="@T("Common.Remove")" class="button-2 remove-button" onclick="setLocation('@Url.RouteUrl("RemoveProductFromCompareList", new { productId = product.Id })')"><span>@T("Common.Remove")</span></button>
                                </div>
                                <div class="picture">
                                    <a href="@Url.RouteUrl("Product", new { SeName = product.SeName })"><img alt="@product.DefaultPictureModel.AlternateText" src="@product.DefaultPictureModel.ImageUrl" title="@product.DefaultPictureModel.Title" /></a>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
                <div class="compare-section product">
                    <div class="title">@T("Products.Compare.Name")</div>
                    <ul>
                        @foreach (var product in Model.Products)
                        {
                            <li class="item">
                                <div class="details">
                                    <div class="product-name">
                                        <a href="@Url.RouteUrl("Product", new { SeName = product.SeName })">@product.Name</a>
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
                <div class="compare-section price">
                    <div class="title">@T("Products.Compare.Price")</div>
                    <ul>
                        @foreach (var product in Model.Products)
                        {
                            <li class="item">
                                <span>@product.ProductPrice.Price</span>
                            </li>
                        }
                    </ul>
                </div>
                <div class="compare-section description">
                    <div class="title">@T("Products.Compare.ShortDescription")</div>
                    <ul>
                        @foreach (var product in Model.Products)
                        {
                            if (Model.IncludeShortDescriptionInCompareProducts)
                            {
                                <li class="item">
                                    <p>@Html.Raw(product.ShortDescription)</p>
                                </li>
                            }
                            else
                            {
                                <li class="item">
                                    <p>@T("Products.Compare.NoDescription")</p>
                                </li>
                            }
                        }
                    </ul>
                </div>
                @foreach (var group in uniqueGroupes)
                {

                    if (group.Attributes.Count > 0)
                    {

                        var uniqueGroupAttributes = new List<ProductSpecificationAttributeModel>();
                        foreach (var attribute in Model.Products.SelectMany(p => p.ProductSpecificationModel.Groups.Where(g => g.Id == group.Id).SelectMany(g => g.Attributes)))
                        {
                            if (!uniqueGroupAttributes.Any(sa => sa.Id == attribute.Id))
                                uniqueGroupAttributes.Add(attribute);
                        }

                        @foreach (var specificationAttribute in uniqueGroupAttributes)
                        {

                            <div class="compare-section specification">
                                <div class="title">@specificationAttribute.Name</div>
                                <ul>
                                    @foreach (var product in Model.Products)
                                    {
                                        var foundProductSpec = product.ProductSpecificationModel.Groups
                                            .Where(g => g.Id == group.Id)
                                            .SelectMany(g => g.Attributes)
                                            .FirstOrDefault(sa => sa.Id == specificationAttribute.Id);

                                        <li class="item">
                                            @if (foundProductSpec != null)
                                            {
                                                for (int i = 0; i < foundProductSpec.Values.Count; i++)
                                                {
                                                    var value = foundProductSpec.Values[i];

                                                    if (string.IsNullOrEmpty(value.ColorSquaresRgb))
                                                    {
                                                        <span>@Html.Raw(value.ValueRaw)</span>
                                                        if (i != foundProductSpec.Values.Count - 1)
                                                        {
                                                            <text>,&nbsp;</text>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <div class="attribute-squares color-squares">
                                                            <span class="attribute-square-container" title="@Html.Raw(value.ValueRaw)">
                                                                <span class="attribute-square" style="background-color: @(value.ColorSquaresRgb);">&nbsp;</span>
                                                            </span>
                                                        </div>
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                <span class="empty"><text>&nbsp;</text></span>
                                            }
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                    }
                }
            </div>
        }
        else
        {
            <div class="no-data">
                @T("Products.Compare.NoItems")
            </div>
        }
    </div>
</div>
</div>
<script asp-location="Footer">
    $(document).ready(function () {
        $("#small-searchterms-compare").val('@small_searchterms_compare')
        $("#small-searchterms-compare-1").val('@small_searchterms_compare_1')
        $("#small-searchterms-compare-2").val('@small_searchterms_compare_2')

    })
</script>
<script id="instantSearchItemTemplate-compare" type="text/x-kendo-template" asp-location="Footer">
    <div class="instant-search-item" data-url=" ${data.CustomProperties.Url}">
        <a class="iOS-temp" onclick="AjaxSearchCart.addproducttocomparelistsearch(${data.Id});return false;">
            <div class="img-block">
                <img src="${ data.DefaultPictureModel.ImageUrl }" alt="${ data.Name }" title="${ data.Name }" style="border: none">
            </div>
            <div class="detail">
                <div class="title">${ data.Name }</div>
                <div class="price"># var price = ""; if (data.ProductPrice.Price) { price = data.ProductPrice.Price } # #= price #</div>
            </div>
        </a>

    </div>

</script>

<script asp-location="Footer">

    var compareUrl='@Url.Content("~/Product/AddProductToCompareList/")'

    var AjaxSearchCart = {
        loadWaiting: false,
        usepopupnotifications: false,
        topcartselector: '',
        topwishlistselector: '',
        flyoutcartselector: '',


        init: function (usepopupnotifications, topcartselector, topwishlistselector, flyoutcartselector, localized_data) {
            this.loadWaiting = false;
            this.usepopupnotifications = usepopupnotifications;
            this.topcartselector = topcartselector;
            this.topwishlistselector = topwishlistselector;
            this.flyoutcartselector = flyoutcartselector;
            this.localized_data = localized_data;
        },

        setLoadWaiting: function (display) {
            displayAjaxLoading(display);
            this.loadWaiting = display;
        },


        //add a product to compare list
        addproducttocomparelistsearch: function (urladd) {
            if (this.loadWaiting !== false) {
                return;
            }
            this.setLoadWaiting(true);
            /**/
            var url = '@Url.Content("~/Product/AddProductToCompareList/")'
            /**/
            var data = { productId: urladd };

            $.ajax({
                cache: false,
                url: url,
                data: data,
                type: "POST",
                success: this.success_process_search,
                complete: this.resetsearchLoadWaiting,
                error: this.ajaxFailure1
            });
        },

        success_process_search: function (response) {
            console.log(response);
            if (response.updatetopcartsectionhtml) {
                $(AjaxCart.topcartselector).html(response.updatetopcartsectionhtml);
            }
            if (response.updatetopwishlistsectionhtml) {
                $(AjaxCart.topwishlistselector).html(response.updatetopwishlistsectionhtml);
            }
            if (response.updateflyoutcartsectionhtml) {
                $(AjaxCart.flyoutcartselector).replaceWith(response.updateflyoutcartsectionhtml);
            }
            if (response.message) {
                //display notification
                if (response.success === true) {
                    //success
                    if (AjaxCart.usepopupnotifications === true) {
                        displayPopupNotification(response.message, 'success', true);

                    }
                    else {
                        //specify timeout for success messages
                        displayBarNotification(response.message, 'success', 3500);
                         location.href = '@Url.Content("~/Product/CompareProducts/")'
                    }

                }
                else {
                    //error
                    if (AjaxCart.usepopupnotifications === true) {
                        displayPopupNotification(response.message, 'error', true);
                    }
                    else {
                        //no timeout for errors
                        displayBarNotification(response.message, 'error', 0);
                    }
                }
                return false;
            }
            return false;
        },

        resetsearchLoadWaiting: function () {
            AjaxCart.setLoadWaiting(false);
        },

        ajaxFailure1: function () {
            alert("Failure");
        }

    };
</script>
<style>
    * {
        box-sizing: border-box;
    }

    .specification-group {
        color: #F1CA2E;
        font-size: 18px;
        font weight:800;
    }

    .specification {
        color: #909090;
        text-transform: capitalize !important;
    }
    /* Create three equal columns that floats next to each other */
    .column {
        float: left;
        width: 33.33%;
    }

    .column1 {
        float: left;
        width: 33.33%;
    }

    .column2 {
        float: left;
        width: 33.33%;
    }
    /* Clear floats after the columns */
    .row:after {
        content: "";
        display: table;
        clear: both;
    }

    .page {
        clear: both;
        text-align: center;
    }

    .item-text {
        padding: 10px;
        letter-spacing: 2px;
    }
    /* WITH CATEGORY */
    .compare-search-box .search-box-select {
        height: 40px;
        position: absolute;
        top: 0;
        right: 5px;
        bottom: 0;
        margin: auto;
        width: 0;
        opacity: 0;
        -webkit-transition: all 0.3s ease-in-out;
        transition: all 0.3s ease-in-out;
        max-width: 50%;
    }

    .compare-search-box form.open .search-box-select {
        width: 200px;
        opacity: 1;
    }

    .compare-search-box input.search-box-text {
        background: #fff;
    }
        /*.compare-search-box input.search-box-text:focus {
        border-color: #ccc;
    }*/ /*use this to "eliminate" global focus if necessary*/

        /* AUTOCOMPLETE */

        .compare-search-box input.search-box-text.narrow {
            width: calc(100% - 205px) !important;
        }

    .compare-search-box form.open .search-box-button {
        position: absolute;
        top: 0;
        left: 0;
        bottom: 0;
    }

    .compare-search-box form.open input.search-box-text {
        /*position: absolute;*/
        top: 0;
        /*left: 51px;*/
        bottom: 0;
    }

    .compare-search-box .search-box-select {
        height: 50px;
    }
    /*.compare-search-box input.search-box-text.narrow
    {
        width: 241px;
    }*/
    .compare-products-table .scroll {
        display: block;
        overflow: auto;
        height: 500px;
        width: 100%;
    }
</style>
