@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Services.Configuration
@inject CatalogSettings catalogSettings
@inject IWorkContext workContext
@inject IStoreContext storeSettings
@inject ISettingService settingService
@inject IViewComponentSelector viewComponentSelector

@model ProductOverviewModel

@{
    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });

    var storeId = (await storeSettings.GetCurrentStoreAsync()).Id;
    var lazyLoadImages = await settingService.GetSettingByKeyAsync("venturethemeSettings.LazyLoadImages", false, storeId, true);

    var quickViewEnabled = await settingService.GetSettingByKeyAsync("QuickViewSettings.Enabled", false, storeId, true);

    var ajaxCartEnabled = await settingService.GetSettingByKeyAsync("nopajaxcartsettings.enablenopajaxcart", false, storeId, true);
    var ajaxCartQuantityBoxEnabled = await settingService.GetSettingByKeyAsync("nopajaxcartsettings.enableproductquantitytextbox", false, storeId, true);

    var prodructItemButtonsCounter = 0;

    if (!Model.ProductPrice.DisableBuyButton)
    {
        prodructItemButtonsCounter++;
    }
    if (!Model.ProductPrice.DisableAddToCompareListButton)
    {
        prodructItemButtonsCounter++;
    }
    if (!Model.ProductPrice.DisableWishlistButton)
    {
        prodructItemButtonsCounter++;
    }
    if (quickViewEnabled)
    {
        prodructItemButtonsCounter++;
    }
    if (ajaxCartQuantityBoxEnabled && ajaxCartEnabled)
    {
        prodructItemButtonsCounter++;
    }
    var prodructItemButtonsCounterClass = "items-" + prodructItemButtonsCounter;
}

<div class="product-item" data-productid="@Model.Id">
    <div class="picture">
        <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">
            @if (viewComponentSelector.SelectComponent("LazyLoadImage") != null)
            {
                if (Model.IsVerified)
                {


                    @await Component.InvokeAsync("LazyLoadImage", new(string Key, string Value)[]
            {
            ("src", Model.DefaultPictureModel.ImageUrl),
            ("alt", Model.DefaultPictureModel.AlternateText),
            ("title", Model.DefaultPictureModel.Title),
            ("class", "picture-img")
            })
                    <svg viewBox="0 0 24 24"
                         aria-hidden="true"
                         class="r-1cvl2hr r-4qtqp9 r-yyyyoo r-1yjpyg1 r-1xvli5t r-dnmrzs r-bnwqim r-1plcrui r-lrvibr watermark-products"
                         data-testid="verificationBadge"
                         version="1.1"
                         id="svg965"
                         xmlns="http://www.w3.org/2000/svg"
                         xmlns:svg="http://www.w3.org/2000/svg">
                        <defs id="defs969" />
                        <g id="g963"
                           style="fill:#1d9bf0;fill-opacity:1">
                            <path d="M22.25 12c0-1.43-.88-2.67-2.19-3.34.46-1.39.2-2.9-.81-3.91s-2.52-1.27-3.91-.81c-.66-1.31-1.91-2.19-3.34-2.19s-2.67.88-3.33 2.19c-1.4-.46-2.91-.2-3.92.81s-1.26 2.52-.8 3.91c-1.31.67-2.2 1.91-2.2 3.34s.89 2.67 2.2 3.34c-.46 1.39-.21 2.9.8 3.91s2.52 1.26 3.91.81c.67 1.31 1.91 2.19 3.34 2.19s2.68-.88 3.34-2.19c1.39.45 2.9.2 3.91-.81s1.27-2.52.81-3.91c1.31-.67 2.19-1.91 2.19-3.34zm-11.71 4.2L6.8 12.46l1.41-1.42 2.26 2.26 4.8-5.23 1.47 1.36-6.2 6.77z"
                                  id="path961"
                                  style="fill:#1d9bf0;fill-opacity:1" />
                        </g>
                    </svg>


                }
                else
                {
                    @await Component.InvokeAsync("LazyLoadImage", new(string Key, string Value)[]
            {
            ("src", Model.DefaultPictureModel.ImageUrl),
            ("alt", Model.DefaultPictureModel.AlternateText),
            ("title", Model.DefaultPictureModel.Title),
            ("class", "picture-img")
            })
                }


            }
            else
            {
                if (Model.IsVerified)
                {


                    <img class="picture-img" alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" />
                    <svg viewBox="0 0 24 24"
                         aria-hidden="true"
                         class="r-1cvl2hr r-4qtqp9 r-yyyyoo r-1yjpyg1 r-1xvli5t r-dnmrzs r-bnwqim r-1plcrui r-lrvibr watermark-products"
                         data-testid="verificationBadge"
                         version="1.1"
                         id="svg965"
                         xmlns="http://www.w3.org/2000/svg"
                         xmlns:svg="http://www.w3.org/2000/svg">
                        <defs id="defs969" />
                        <g id="g963"
                           style="fill:#1d9bf0;fill-opacity:1">
                            <path d="M22.25 12c0-1.43-.88-2.67-2.19-3.34.46-1.39.2-2.9-.81-3.91s-2.52-1.27-3.91-.81c-.66-1.31-1.91-2.19-3.34-2.19s-2.67.88-3.33 2.19c-1.4-.46-2.91-.2-3.92.81s-1.26 2.52-.8 3.91c-1.31.67-2.2 1.91-2.2 3.34s.89 2.67 2.2 3.34c-.46 1.39-.21 2.9.8 3.91s2.52 1.26 3.91.81c.67 1.31 1.91 2.19 3.34 2.19s2.68-.88 3.34-2.19c1.39.45 2.9.2 3.91-.81s1.27-2.52.81-3.91c1.31-.67 2.19-1.91 2.19-3.34zm-11.71 4.2L6.8 12.46l1.41-1.42 2.26 2.26 4.8-5.23 1.47 1.36-6.2 6.77z"
                                  id="path961"
                                  style="fill:#1d9bf0;fill-opacity:1" />
                        </g>
                    </svg>


                }
                else
                {
                    <img class="picture-img" alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" />
                }

            }
        </a>
    </div>
    <div class="details">
       
        
        <h2 class="product-title">
            <a href="@Url.RouteUrl("Product", new {SeName = Model.SeName})">@Model.Name</a>

        </h2>
        @*Vendor*@
        @if (Model.ShowVendor)
        {
            <div class="product-vendor">
                <span class="label">@(Model.VendorModel.IsSeller ? T("Products.Seller") : T("Products.Vendor")):</span>
                <span class="actual-price"><a href="@Url.RouteUrl("Vendor", new { SeName = Model.VendorModel.SeName })">@Model.VendorModel.Name</a></span>
            </div>
        }
        @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
        {
            <div class="sku">
                @Model.Sku
            </div>
        }
        @if (Model.ReviewOverviewModel.AllowCustomerReviews)
        {
            var ratingPercent = 0;
            if (Model.ReviewOverviewModel.TotalReviews != 0)
            {
                ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
            }
            <div class="product-rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                <div class="rating">
                    <div style="width: @(ratingPercent)%">
                    </div>
                </div>
            </div>
        }
        <div class="description">
            @Html.Raw(Model.ShortDescription)
        </div>
        <div class="add-info">
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoBefore, additionalData = Model })
            <div class="prices">
                <div class="box-prices-wrapper">
                    <span class="price actual-price">@Model.ProductPrice.Price</span>
                    @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                    {
                        <span class="price old-price">@Model.ProductPrice.OldPrice</span>
                    }
                </div>
                <div class="additional-price-info">
                    @if (Model.ProductPrice.DisplayTaxShippingInfo)
                    {
                        var inclTax = await workContext.GetTaxDisplayTypeAsync() == TaxDisplayType.IncludingTax;
                        //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                        //of course, you can modify appropriate locales to include VAT info there
                        <span class="tax-shipping-info">
                            @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = await Html.GetTopicSeNameAsync("shippinginfo") }))
                        </span>
                    }
                    @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                    {
                        <div class="base-price-pangv">
                            @Model.ProductPrice.BasePricePAngV
                        </div>
                    }
                </div>
            </div>
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoMiddle, additionalData = Model })
            <div class="buttons @prodructItemButtonsCounterClass">
                @if (!Model.ProductPrice.DisableAddToCompareListButton)
                {
                    <button type="button" class="button-2 add-to-compare-list-button" title="@T("ShoppingCart.AddToCompareList")" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;">@T("ShoppingCart.AddToCompareList")</button>
                }
                @if (!Model.ProductPrice.DisableWishlistButton)
                {
                    <button type="button" class="button-2 add-to-wishlist-button" title="@T("ShoppingCart.AddToWishlist")" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;">@T("ShoppingCart.AddToWishlist")</button>
                }
                @*<button type="button" class="button-1 product-box-detail-button" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')">@T("Products.Details")</button>*@
                @if (!Model.ProductPrice.DisableBuyButton)
                {
                    var addToCartText = T("ShoppingCart.AddToCart").Text;
                    if (Model.ProductPrice.IsRental)
                    {
                        addToCartText = T("ShoppingCart.Rent").Text;
                    }
                    if (Model.ProductPrice.AvailableForPreOrder)
                    {
                        addToCartText = T("ShoppingCart.PreOrder").Text;
                    }
                    <button type="button" class="button-2 product-box-add-to-cart-button" title="@(addToCartText)" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;">@(addToCartText)</button>
                }
            </div>
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter, additionalData = Model })
        </div>
    </div>
</div>
